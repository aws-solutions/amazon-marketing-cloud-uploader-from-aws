name: Pull Request Workflow

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - development
      - github_first
  workflow_dispatch:

jobs:
  viperlight-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}
      - name: Viperlight scan
        run: |
          echo "Installing content scanning utility"
          sudo apt-get install wget -y
          wget -v "https://s3.amazonaws.com/viperlight-scanner/latest/.viperlightrc"
          wget -v "https://s3.amazonaws.com/viperlight-scanner/latest/viperlight.zip"
          unzip -q viperlight.zip -d ../viperlight
          rm -r ./viperlight.zip
          echo "Content scanning utility installation complete `date`"
          echo "Starting content scanning `date` in `pwd`"
          ../viperlight/bin/viperlight scan -x python-pipoutdated -x python-bandit
          echo "Completed content scanning `date`"

  cfn-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}
      - name: Run cfn_nag
        uses: stelligent/cfn_nag@master
        continue-on-error: true
        with:
          input_path: deployment

  npm-lint-checker:
    needs:
      - viperlight-scan
      - cfn-scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run npm lint
        run: |
          ./run-pre-commit.sh -rnl

  pre-commit:
    needs:
      - viperlight-scan
      - cfn-scan
      - npm-lint-checker
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run Pre-Commit
        run: |
          ./run-pre-commit.sh -rpc

  unit-test:
    needs:
      - viperlight-scan
      - cfn-scan
      - npm-lint-checker
      - pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Run Unit Test
        run: |
          VENV=$(mktemp -d) && echo "$VENV"
          python3.10 -m venv "$VENV"
          source "$VENV"/bin/activate
          ls -l
          cd source/tests
          ./run_test.sh --run_unit_test
      - name: Run Coverage Report
        run: |
          cd deployment
          ./run-unit-tests.sh

  integration_test:
    needs:
      - viperlight-scan
      - cfn-scan
      - unit-test
    runs-on: ubuntu-latest
    outputs:
      AMC_GLUE_JOB_ROLE_NAME: ${{ steps.api_test.outputs.AMC_GLUE_JOB_ROLE_NAME }}
    steps:
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{needs.build.outputs.REGION}}
      - name: Check out pr branch
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.sha }}
      - name: Run API Tests
        id: api_test
        run: |
          STACK_NAME=amcufa-imgeo
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_OUTPUT
          VERSION=0.0.0
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          TEST_ACCOUNT_ID=$(aws sts get-caller-identity --query Account)
          TEST_ACCOUNT_ID=$(echo $TEST_ACCOUNT_ID | tr -d '"')
          TEST_USER_ARN="arn:aws:iam::${TEST_ACCOUNT_ID}:user/githubBuilderBot"
          echo "DATA_BUCKET_NAME=${{secrets.DATA_BUCKET_NAME}}" >> $GITHUB_ENV
          ls -l
          cd source/tests/
          ./run_test.sh --run_integ_test \
          --stack-name $STACK_NAME \
          --aws-region "us-east-1" \
          --aws-access-key-id ${{secrets.DATA_UPLOAD_ACCOUNT_ID}} \
          --aws-secret-access-key ${{secrets.DATA_UPLOAD_ACCOUNT_ID}} \
          --data-bucket-name $DATA_BUCKET_NAME \
          --amc-endpoint-url ${{ secrets.AMC_API_ENDPOINT }} \
          --test_upload_account_id ${{secrets.DATA_UPLOAD_ACCOUNT_ID}} \
          --test_user_arn $TEST_USER_ARN \
          --version $VERSION \
          --aws-xray-sdk-enabled false
