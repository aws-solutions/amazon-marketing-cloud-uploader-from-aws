AWSTemplateFormatVersion: "2010-09-09"
Description: "(SO0222) - amcufa %%VERSION%%. This is the base AWS CloudFormation template that defines resources and nested stacks for this solution."

Parameters:
  AdminEmail:
    Description: "Email address of the webapp administrator"
    Type: String
  DataBucketName:
    Description: "Name of the S3 bucket from which source data will be uploaded. Bucket is NOT created by this CFT."
    Type: String
  AmcEndpointUrl:
    Description: "AMC API Endpoint URL"
    Type: String
  DataUploadAccountId:
    Description: "AMC data upload AWS account ID."
    Type: String
  CustomerManagedKey:
    Description: "(Optional) ARN of a customer managed KMS encryption key (CMK) to use for encryption and decryption of original data files during the ETL pipeline and query computation in AMC."
    Type: String
    Default: ""

Conditions:
  EnableCmkEncryptionCondition: !Not [!Equals [!Ref CustomerManagedKey, ""]]
  EnableAnonymousData: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], Yes]
  
Mappings:
  Application:
    Solution:
      Id: "SO0222"
      Name: "amcufa"
      Version: "%%VERSION%%"
      AppRegistryApplicationName: 'amazon-marketing-cloud-uploader-from-aws'
      ApplicationType: 'AWS-Solutions'
    SourceCode:
      GlobalS3Bucket: "%%GLOBAL_BUCKET_NAME%%"
      TemplateKeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
      RegionalS3Bucket: "%%REGIONAL_BUCKET_NAME%%"
      CodeKeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
  AnonymousData:
    SendAnonymousData:
      Data: Yes

Resources:
          
  # S3

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              AWS: !Sub 'arn:aws:iam::${DataUploadAccountId}:root'
            Action: 
              - 's3:GetObject'
              - 's3:GetObjectVersion'
            Resource: !Sub "arn:aws:s3:::${ArtifactBucket}/*"
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${DataUploadAccountId}:root'
            Action: 
              - 's3:ListBucket'
            Resource: !Sub "arn:aws:s3:::${ArtifactBucket}"
          - Effect: Deny
            Principal: "*"
            Action: "*"
            Resource: !Sub "arn:aws:s3:::${ArtifactBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false

  ArtifactLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "*"
            Resource: !Sub "arn:aws:s3:::${ArtifactLogsBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false
                
  ArtifactLogsBucket:
    DeletionPolicy: "Delete"
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: !If
              - EnableCmkEncryptionCondition
              -
                SSEAlgorithm: "aws:kms"
                KMSMasterKeyID: !Ref CustomerManagedKey
              - SSEAlgorithm: "AES256"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: "Keep access logs for 3 days"
            Status: Enabled
            Prefix: "access_logs/"
            ExpirationInDays: 3
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      Tags:
        - Key: "Environment"
          Value: "amcufa"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Used to store access logs for other buckets"
          - id: W51
            reason: "Bucket is private and does not need a bucket policy"

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DependsOn: 
      - AmcUploadLambdaPermission
    DeletionPolicy: "Delete"
    Properties:
      BucketName:
        'Fn::Join':
          - ""
          - - !Ref "AWS::StackName"
            - "-etl-artifacts-"
            - !GetAtt GetShortUUID.Data
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: !If
              - EnableCmkEncryptionCondition
              -
                SSEAlgorithm: "aws:kms"
                KMSMasterKeyID: !Ref CustomerManagedKey
              - SSEAlgorithm: "AES256"
      LoggingConfiguration:
        DestinationBucketName: !Ref ArtifactLogsBucket
        LogFilePrefix: "access_logs/"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: "Keep ETL artifacts for 3 days"
            Status: Enabled
            Prefix: "amc/"
            ExpirationInDays: 3
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt AmcUploadLambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.gz'
                  - Name: prefix
                    Value: 'amc/'
      Tags:
        - Key: "Environment"
          Value: "amcufa"

  AmcUploadLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AmcUploadLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ""
          - - 'arn:aws:s3:::'
            - !Ref "AWS::StackName" 
            - '-etl-artifacts-'
            - !GetAtt GetShortUUID.Data
      SourceAccount: !Ref AWS::AccountId

  AmcUploadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy uses actions that must be applied to all resources. See https://docs.aws.amazon.com/xray/latest/devguide/security_iam_id-based-policy-examples.html#xray-permissions-resources"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  'Fn::Join':
                    - ""
                    - - 'arn:aws:s3:::'
                      - !Ref "AWS::StackName"
                      - '-etl-artifacts-'
                      - !GetAtt GetShortUUID.Data
                      - '/*' 
        - PolicyName: invokeAmcApi
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-AmcApiAccessRole"

  AmcApiAccessRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Role name is constructed with stack name. Updates will keep the existing role name."
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM role to grant access to the AMC API."
      RoleName: !Join [ "-", [ { "Ref": "AWS::StackName" }, "AmcApiAccessRole" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt ApiStack.Outputs.ApiHandlerRoleArn
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !GetAtt AmcUploadLambdaExecutionRole.Arn
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AmcApiAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:execute-api:us-east-1:*:",
                      "Fn::Select": [
                        0,
                        "Fn::Split": [
                          ".",
                          "Fn::Select": [
                            2,
                            "Fn::Split": [
                                "/",
                                !Ref AmcEndpointUrl
                            ]
                          ]
                        ]
                      ],
                      "/*"
                    ]
                  ]

  AmcUploadLambdaFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "The role includes permission to write to CloudWatch Logs"
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "Application", "SourceCode", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap [ "Application", "SourceCode", "CodeKeyPrefix" ],
              "amc_uploader.zip",
            ],
          ]
      Handler: amc_uploader.lambda_handler
      Role: !GetAtt AmcUploadLambdaExecutionRole.Arn
      Runtime: python3.9
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          AMC_API_ROLE_ARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-AmcApiAccessRole'
          AMC_ENDPOINT_URL: !Ref AmcEndpointUrl
          SOLUTION_NAME: !FindInMap ["Application", "Solution", "Name"]
          SOLUTION_VERSION: !FindInMap ["Application", "Solution", "Version"]
          botoConfig: !Join
            - ''
            - - '{"region_name": "'
              - !Ref "AWS::Region"
              - '","user_agent_extra": "AwsSolution/'
              - !FindInMap
                - Application
                - Solution
                - Id
              - '/'
              - !FindInMap
                - Application
                - Solution
                - Version
              - '"}'
      TracingConfig:
        Mode: "Active"

  AmcUploadLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "The data generated via this role does not need to be encrypted."
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref AmcUploadLambdaFunction]]
      RetentionInDays: 30

  # Helper function 
  # - Generates a unique name for the ArtifactBucket
  # - Also purges ArtifactLogsBucket, so it can be removed when the stack is deleted.
  HelperFunction:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "The role includes permission to write to CloudWatch Logs"
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Environment:
        Variables:
          DESIGNATED_LOGGING_BUCKET: !Ref ArtifactLogsBucket
      Code:
        ZipFile: |
          import string
          import cfnresponse
          import random
          import boto3
          import json
          import os
          import logging
          from urllib.request import build_opener, HTTPHandler, Request
          
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          
          
          def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
            return "".join(random.choices(chars, k=size))
          
          
          def handler(event, context):
            print("We got the following event:\n", event)
            try:
              LOGGER.info('REQUEST RECEIVED:\n {s}'.format(s=event))
              LOGGER.info('REQUEST RECEIVED:\n {s}'.format(s=context))
              if event['ResourceProperties']['FunctionKey'] == 'get_short_uuid':
                response_data = {'Data': id_generator()}
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
              if event['RequestType'] == 'Delete':
                LOGGER.info('DELETE!')
                purge_bucket(event, context)
                send_response(event, context, "SUCCESS", {"Message": "Resource deletion successful!"})
            except Exception as e:
                          LOGGER.info('FAILED!')
                          send_response(event, context, "FAILED", {"Message": "Exception during processing: {e}".format(e=e)})


          def purge_bucket(event, context):
            try:
              s3 = boto3.resource('s3')
              bucket_name = os.environ["DESIGNATED_LOGGING_BUCKET"]
              LOGGER.info("Purging bucket, " + bucket_name)
              bucket = s3.Bucket(bucket_name) 
              bucket.objects.all().delete()
            except Exception as e:
              LOGGER.info("Unable to purge artifact bucket while deleting stack: {e}".format(e=e))
              send_response(event, context, "FAILED", {"Message": "Unexpected event received from CloudFormation"})
            else:
              send_response(event, context, "SUCCESS", {"Message": "Resource creation successful!"})


          def send_response(event, context, response_status, response_data):
            """
            Send a resource manipulation status response to CloudFormation
            """
            response_body = json.dumps({
                "Status": response_status,
                "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                "PhysicalResourceId": context.log_stream_name,
                "StackId": event['StackId'],
                "RequestId": event['RequestId'],
                "LogicalResourceId": event['LogicalResourceId'],
                "Data": response_data
            })

            LOGGER.info('ResponseURL: {s}'.format(s=event['ResponseURL']))
            LOGGER.info('ResponseBody: {s}'.format(s=response_body))

            opener = build_opener(HTTPHandler)
            request = Request(event['ResponseURL'], data=response_body.encode('utf-8'))
            request.add_header('Content-Type', '')
            request.add_header('Content-Length', len(response_body))
            request.get_method = lambda: 'PUT'
            response = opener.open(request)

      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt HelperFunctionRole.Arn
      Tags:
        - Key: "Environment"
          Value: "amcufa"

  HelperFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "The data generated via this role does not need to be encrypted."
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref HelperFunction]]
      RetentionInDays: 30

  HelperFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [
                      "",
                    [
                        "arn:aws:logs:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":log-group:/aws/lambda/*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - "s3:DeleteObject"
                Resource:
                  - !Join [
                      "",
                    [
                        "arn:aws:s3:::",
                        Ref: ArtifactLogsBucket,
                        "/*"
                    ]
                  ]
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource:
                  - !Join [
                      "",
                    [
                        "arn:aws:s3:::",
                        Ref: ArtifactLogsBucket,
                    ]
                  ]

      Tags:
        - Key: "Environment"
          Value: "amcufa"

  HelperFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt HelperFunction.Arn
      Principal: 'cloudformation.amazonaws.com'

  GetShortUUID:
    Type: Custom::CustomResource
    DependsOn:
      - ArtifactLogsBucket
    Properties:
      ServiceToken: !GetAtt HelperFunction.Arn
      FunctionKey: "get_short_uuid"

  # Auth stack

  AuthStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join
        - ""
        - - "https://"
          - !FindInMap
            - Application
            - SourceCode
            - GlobalS3Bucket
          - ".s3.amazonaws.com/"
          - !FindInMap
            - Application
            - SourceCode
            - TemplateKeyPrefix
          - "/auth.template"
      Parameters:
        AdminEmail: !Ref AdminEmail
        DataBucketName: !Ref DataBucketName
        RestApiId: !GetAtt ApiStack.Outputs.RestAPIId
        ParentStackName: !Ref AWS::StackName

  # Glue ETL stack

  GlueStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join
        - ""
        - - "https://"
          - !FindInMap
            - Application
            - SourceCode
            - GlobalS3Bucket
          - ".s3.amazonaws.com/"
          - !FindInMap
            - Application
            - SourceCode
            - TemplateKeyPrefix
          - "/glue.template"
      Parameters:
        ArtifactBucketName: !Ref ArtifactBucket
        DataBucketName: !Ref DataBucketName
        CustomerManagedKey: !Ref CustomerManagedKey

  # Web stack
  
  WebStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join
        - ""
        - - "https://"
          - !FindInMap
            - Application
            - SourceCode
            - GlobalS3Bucket
          - ".s3.amazonaws.com/"
          - !FindInMap
            - Application
            - SourceCode
            - TemplateKeyPrefix
          - "/web.template"
      Parameters:
        DataBucketName: !Ref DataBucketName 
        ArtifactBucketName: !Ref ArtifactBucket 
        UserPoolId: !GetAtt AuthStack.Outputs.UserPoolId
        IdentityPoolId: !GetAtt AuthStack.Outputs.IdentityPoolId
        PoolClientId: !GetAtt AuthStack.Outputs.UserPoolClientId
        ApiEndpoint: !GetAtt ApiStack.Outputs.EndpointURL
        RestAPIId: !GetAtt ApiStack.Outputs.RestAPIId
        CustomerManagedKey: !Ref CustomerManagedKey

  # API stack
  ApiStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join
        - ""
        - - "https://"
          - !FindInMap
            - Application
            - SourceCode
            - GlobalS3Bucket
          - ".s3.amazonaws.com/"
          - !FindInMap
            - Application
            - SourceCode
            - TemplateKeyPrefix
          - "/api.template"
      Parameters:
        botoConfig: !Join
          - ''
          - - '{"region_name": "'
            - !Ref "AWS::Region"
            - '","user_agent_extra": "AwsSolution/'
            - !FindInMap
              - Application
              - Solution
              - Id
            - '/'
            - !FindInMap
              - Application
              - Solution
              - Version
            - '"}'
        Version: !FindInMap
          - Application
          - Solution
          - Version
        Name: !FindInMap
          - Application
          - Solution
          - Name
        DeploymentPackageBucket: !Join 
          - "-"
          - - !FindInMap 
              - Application
              - SourceCode
              - RegionalS3Bucket
            - Ref: "AWS::Region"
        DeploymentPackageKey: !Join
          - "/"
          - - !FindInMap
              - Application
              - SourceCode
              - CodeKeyPrefix
            - "api.zip"
        DataBucketName: !Ref DataBucketName
        AmcEndpointUrl: !Ref AmcEndpointUrl
        AmcApiRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-AmcApiAccessRole'
        AmcGlueJobName: !GetAtt GlueStack.Outputs.AmcGlueJobName
        TracingConfigMode: "Active"
        CustomerManagedKey: !Ref CustomerManagedKey

  # Resources for sending anonymous operational metrics to AWS 
  AnonymousDataCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-anonymous-data-logger"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]

  AnonymousDataCustomResource:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Description: Used to send anonymous data
      Handler: anonymous-data-logger.handler
      Role: !GetAtt AnonymousDataCustomResourceRole.Arn
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "Application", "SourceCode", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key: !Join [ "/", [ !FindInMap [ "Application", "SourceCode", "CodeKeyPrefix" ], "anonymous-data-logger.zip" ] ]
      Runtime:  python3.8
      Timeout: 180

  AnonymousDataCustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "The data generated via this role does not need to be encrypted."
    Properties:
      LogGroupName: !Join ['/', ['/aws/lambda', !Ref AnonymousDataCustomResource]]
      RetentionInDays: 30

  # SendAnonymousData
  AnonymousDataUuid:
    Condition: EnableAnonymousData
    Type: "Custom::UUID"
    Properties:
      ServiceToken: !GetAtt AnonymousDataCustomResource.Arn
      Resource: UUID

  AnonymousMetric:
    Condition: EnableAnonymousData
    Type: "Custom::AnonymousMetric"
    Properties:
      ServiceToken: !GetAtt AnonymousDataCustomResource.Arn
      Resource: AnonymousMetric
      SolutionId: !FindInMap ["Application", "Solution", "Id"]
      UUID: !GetAtt AnonymousDataUuid.UUID
      Version: !FindInMap ["Application", "Solution", "Version"]

  # App Registry
  Application:
    Type: AWS::ServiceCatalogAppRegistry::Application
    Properties:
      Description: Service Catalog application to track and manage all your resources for the solution Amazon Marketing Cloud uploader from AWS
      Name:
        !Join
            - "-"
            - - !FindInMap [Application, Solution, "AppRegistryApplicationName"]
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - !Ref AWS::StackName
      Tags: {
        'Solutions:SolutionID': !FindInMap [Application, Solution, "Id"],
        'Solutions:SolutionVersion': !FindInMap [Application, Solution, "Version"],
        'Solutions:SolutionName': !FindInMap [Application, Solution, "Name"],
        'Solutions:ApplicationType': !FindInMap [Application, Solution, "ApplicationType"],
        } 
        
  AppRegistryApplicationStackAssociation:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !GetAtt Application.Id
      Resource:
        !Ref AWS::StackId
      ResourceType: CFN_STACK

  AppRegistryApplicationStackAssociationNestedApiStack:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !GetAtt Application.Id
      Resource:
        !Ref ApiStack
      ResourceType: CFN_STACK

  AppRegistryApplicationStackAssociationNestedWebStack:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !GetAtt Application.Id
      Resource:
        !Ref WebStack
      ResourceType: CFN_STACK

  AppRegistryApplicationStackAssociationNestedGlueStack:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !GetAtt Application.Id
      Resource:
        !Ref GlueStack
      ResourceType: CFN_STACK

  AppRegistryApplicationStackAssociationNestedAuthStack:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties:
      Application: !GetAtt Application.Id
      Resource:
        !Ref AuthStack
      ResourceType: CFN_STACK

  DefaultApplicationAttributes:
    Type: AWS::ServiceCatalogAppRegistry::AttributeGroup
    Properties:
      Name: !Join ['-', [!Ref 'AWS::Region', !Ref 'AWS::StackName']]
      Description: Attribute group for solution information.
      Attributes: {       
        "ApplicationType" : !FindInMap [Application, Solution, "ApplicationType"],
        "Version": !FindInMap [Application, Solution, "Version"],
        "SolutionID": !FindInMap [Application, Solution, "Id"],
        "SolutionName": !FindInMap [Application, Solution, "Name"]
        }

  AppRegistryApplicationAttributeAssociation:
    Type: AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation
    Properties:
      Application: !GetAtt Application.Id
      AttributeGroup: !GetAtt DefaultApplicationAttributes.Id

Outputs:
  UserInterface:
    Value: !GetAtt WebStack.Outputs.CloudfrontUrl
