{
  "Description": "(SO0222api) - Amazon Marketing Cloud Uploader from AWS. This AWS CloudFormation template defines resources for the REST API. %%VERSION%%.",
  "Parameters": {
    "botoConfig": {
      "Type": "String",
      "Description": "Botocore config"
    },
    "Version": {
      "Type": "String",
      "Description": "Solution version"
    },
    "Name": {
      "Type": "String",
      "Description": "Solution name"
    },
    "DeploymentPackageBucket": {
      "Type": "String",
      "Description": "Bucket that contains the deployment package for Lambda API handlers"
    },
    "DeploymentPackageKey": {
      "Type": "String",
      "Description": "S3 Key of the deployment package for Lambda API handlers"
    },
    "ArtifactBucket": {
      "Type": "String",
      "Description": "S3 bucket containing normalized and hashed data objects ready for ingest"
    },
    "DataBucketName": {
      "Type": "String",
      "Description": "S3 bucket containing first-party data object for ingest"
    },
    "AmcApiRoleArn": {
      "Type": "String",
      "Description": "AMC API Role"
    },
    "SystemTableName": {
      "Type": "String",
      "Description": "Table used for storing global settings"
    },
    "UploadFailuresTableName": {
      "Type": "String",
      "Description": "Table used for storing upload failure messages"
    },
    "AmcGlueJobName": {
      "Type": "String",
      "Description": "Glue ETL Job name for AMC"
    },
    "TracingConfigMode": {
      "Type": "String",
      "Description": "Sets tracing mode for AWS X-Ray. Allowed values: Active, PassThrough"
    },
    "CustomerManagedKey": {
      "Type": "String",
      "Description": "(Optional) ARN of a customer managed KMS encryption key (CMK) to use for encryption and decryption of original data files during the ETL pipeline and query computation in AMC."
    },
    "SystemKmsKeyId": {
      "Type": "String",
      "Description": "ID of the stack KMS Key"
    },
    "StackName": {
      "Type": "String",
      "Description": "CF Stack Name"
    },
    "AccountId": {
      "Type": "String",
      "Description": "Aws Account ID"
    },
    "LambdaLayer": {
      "Type": "String",
      "Description": "Arn of the custom Lambda layer"
    }
  },
  "Conditions": {
    "EnableCmkEncryptionCondition": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "CustomerManagedKey"
            },
            ""
          ]
        }
      ]
    }
  },
  "Outputs": {
    "ApiHandlerRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "ApiHandlerRole",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "ApiHandlerRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "The X-Ray policy uses actions that must be applied to all resources. See https://docs.aws.amazon.com/xray/latest/devguide/security_iam_id-based-policy-examples.html#xray-permissions-resources"
            }
          ]
        }
      },
      "Properties": {
        "Description": "This role is used by the api lambda when invoked by API Gateway",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${DataBucketName}/*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${DataBucketName}"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetBucketPolicy",
                    "s3:PutBucketPolicy"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::${ArtifactBucket}"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:GetRolePolicy",
                    "iam:PutRolePolicy"
                  ],
                  "Resource": {
                    "Ref": "AmcApiRoleArn"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "glue:StartJobRun",
                    "glue:GetJobRuns"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/${AmcGlueJobName}"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query",
                    "dynamodb:Scan"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SystemTableName}"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UploadFailuresTableName}"
                  }
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                  },
                  "Effect": "Allow",
                  "Sid": "Logging"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-AmcApiAccessRole"
                  }
                },
                {
                  "Fn::If": [
                    "EnableCmkEncryptionCondition",
                    {
                      "Action": [
                        "kms:Decrypt",
                        "kms:GenerateDataKey"
                      ],
                      "Resource": [
                        {
                          "Ref": "CustomerManagedKey"
                        }
                      ],
                      "Effect": "Allow"
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt",
                    "kms:GenerateDataKey"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${SystemKmsKeyId}"
                  }
                },
                {
                  "Action": [
                    "secretsmanager:CreateSecret",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:UpdateSecret"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${StackName}-${AWS::Region}_*"
                  }
                },
                {
                  "Action": [
                    "cognito-idp:Describe*"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
                  }
                }
              ]
            },
            "PolicyName": "ApiHandlerRolePolicy"
          }
        ]
      }
    },
    "APIHandler": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
            },
            {
              "id": "W92",
              "reason": "This function does not require performance optimization, so the default concurrency limits suffice."
            }
          ]
        }
      },
      "Properties": {
        "Runtime": "python3.12",
        "Environment": {
          "Variables": {
            "botoConfig": {
              "Ref": "botoConfig"
            },
            "VERSION": {
              "Ref": "Version"
            },
            "SOLUTION_NAME": {
              "Ref": "Name"
            },
            "AMC_API_ROLE_ARN": {
              "Ref": "AmcApiRoleArn"
            },
            "AMC_GLUE_JOB_NAME": {
              "Ref": "AmcGlueJobName"
            },
            "ARTIFACT_BUCKET": {
              "Ref": "ArtifactBucket"
            },
            "SYSTEM_TABLE_NAME": {
              "Ref": "SystemTableName"
            },
            "UPLOAD_FAILURES_TABLE_NAME": {
              "Ref": "UploadFailuresTableName"
            },
            "CUSTOMER_MANAGED_KEY": {
              "Ref": "CustomerManagedKey"
            },
            "STACK_NAME": {
              "Ref": "StackName"
            },
            "ACCOUNT_ID": {
              "Ref": "AccountId"
            }
          }
        },
        "Layers": [
          {
            "Ref": "LambdaLayer"
          },
          {
            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python312:6"
          }
        ],
        "Tracing": {
          "Ref": "TracingConfigMode"
        },
        "Role": {
          "Fn::GetAtt": [
            "ApiHandlerRole",
            "Arn"
          ]
        },
        "CodeUri": {
          "Bucket": {
            "Ref": "DeploymentPackageBucket"
          },
          "Key": {
            "Ref": "DeploymentPackageKey"
          }
        }
      }
    }
  }
}
